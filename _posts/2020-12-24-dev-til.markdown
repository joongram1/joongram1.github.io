---
layout: post
title: TIL 2020-12-24 
subtitle: TIL 
categories: dev
tags: til 앨리스코딩 파이썬 데이터분석 NumPy Pandas DataFrame
comments: true
---


> 2020-12-24 TIL(Today I learned)
---

##### `앨리스코딩`의 `"파이썬으로 시작하는 데이터분석"` 강의를 듣고 작성한 노트 입니다.
---

* __Series__
  - pd.Series(name)
  - Numpy array가 보강된 형태로, Data와 Index를 가지고 있는 데이터 형식  
  - 값과 인덱스 매개변수를 각각 넣어주거나, 딕셔너리를 매개변수로 넣어주는 방법이 있음  
  
  
  ~~~python
  # Series 데이터 만들기
  import numpy as np
  import pandas as pd
  
  series = pd.Series([1,2,3,4], index = ['a','b','c','d'], name="Title") # 값과 인덱스 매개변수 입력
  series = pd.Series({'a' : 1, 'b' : 2, 'c' : 3, 'd' : 4}) # 딕셔너리 매개변수 입력
  ~~~
  
  
* __DataFrame__
  - 여러 개의 Series가 모여서 행과 열을 이룬 데이터, 여러 개의 컬럼 값 가질 수 있음(시리즈 : 1개의 컬럼 값만 가짐)
  - Series도 numpy array처럼 연산자를 쓸 수 있음
    + country = pd.DataFrame({'population' : population, 'gdp' : gdp})
    + gdp_per_capita = country['gdp'] / country['population']
    + country['gdp per capita'] = gdp_per_capita
    + country.index
    + country.columns
    
  - 저장과 불러오기 : 이미 만들어진 데이터 프레임을 저장/불러올 수 있다
    + country.to_csv("./country.csv")
    + conutry.to_excel("country.xlsx")
    + country = pd.read_csv("./country.csv")
    + country = pd.read_excel("country.xlsx")  
    

  ~~~python
  # GDP와 인구 데이터 모두를 나타내는 데이터프레임 만들기
  import numpy as np
  import pandas as pd

  population_dict = {'korea':5100, 'japan':12718, 'china':141500, 'usa':32676,} 
  gdp_dict = {'korea':169320000, 'japan':516700000, 'china':1409250000, 'usa':2041280000,}
  population = pd.Series(population_dict) # population 시리즈 생성
  gdp = pd.Series(gdp_dict) # gdp 시리즈 생성

  country = pd.Dataframe({'population':population, 'gdp':gdp}) # 2개의 시리즈 값이 들어간 데이터프레임 생성
  gdp_per_capita = country['gdp'] / country['population'] # gdp_per_capita 값 설정
  country['gdp_per_capita] = gdp_per_capita # 데이터프레임에 gdp per capita 칼럼을 추가

  print(country.index) # country 인덱스 확인
  print(country.columns) # country 컬럼 확인
  ~~~  


* __Indexing / Slicing__
  - loc : 명시적인 인덱스를 참조하는 인덱싱/슬라이싱
    + country.loc['china'] : index값으로 출력
    + country.loc['japan' : 'korea', : 'population']
    
  - iloc : 파이썬 스타일 정수 인덱스 인덱싱/슬라이싱
    + country.iloc[0]
    + country.iloc[1:3, :2]  
    

  ~~~python
  # 인덱싱 / 슬라이싱
  import numpy as np
  import pandas as pd
  country = pd.read_csv("./data/country.csv", index_col=0)

  print(country.loc['china'] # 명시적 인덱싱 사용, 데이터프레임의 'china' 인덱스 출력
  print(country.iloc[1:4] # 정수 인덱싱 사용, 데이터프레임의 1~3번째 인덱스 출력
  ~~~


* __DataFrame 새 데이터 추가/수정__
  - dataframe = pd.DataFrame(columns = ['이름', '나이', '주소])
  - 리스트로 추가하는 방법
    + dataframe.loc[0] = ['철수', '25', '서울']
    
  - 딕셔너리로 추가하는 방법
    + dataframe.loc[1] = {'이름' : '영희', '나이' : '26', '주소' : '인천'}
    
  - 수정
    + dataframe.loc[1, '이름'] = '정훈'
    
  - 새 컬럼 추가
    + dataframe['전화번호'] = np.nan # nan = Not a number(비어있음)
    + dataframe.loc[0, '전화번호'] = '01012345678'
    
  - 컬럼 선택
    + 컬럼이름 하나만 있다 : Series
      dataframe["이름"]
    + 리스트로 들어가 있다 : DataFrame
      dataframe["이름", "주소", "나이"]
  
  - 누락된 데이터 체크
    + dataframe.isnull() : 비어 있는 값을 True로
    + dataframe.notnull() : 값 채워진 것을 True로
    + dataframe.dropna() : 비어 있는 값을 삭제
    + dataframe['전화번호'] = dataframe['전화번호'].fillna('전화번호 없음') : 비어 있는 값 채우기
    
  - Series 연산
    + A.add(B, fill_value = 0)
    
  - 값으로 정렬하기
    + sort_values('col1', ascending = False) : col1을 기준으로 내림차순 정렬
    + sort_values('col1', 'col2') : col1을 기준으로 먼저 정렬, 그 후 col2를 기준으로 정렬  



  ~~~python
  # pandas(데이터프레임) 연산, 함수 실습
  import numpy as np
  import pandas as pd

  A = pd.DataFrame(np.random.randint(0, 10, (2,2)), columns=['A','B']) # 컬럼이 A,B며 0이상 10미만의 정수로 이루어진 (2,2) 배열 생성
  B = pd.DataFrame(np.random.randint(0, 10, (3,3)), columns=['B','A','C']) # 컬럼이 B,A,C이며 0이상 10미만의 정수로 이루어진 (3,3) 배열 생성

  print(A + B)
  print(A.add(B, fill_value=0)) # B의 null값에 0을 넣은 후, A와 더한다
  ~~~

  ~~~python
  # DataFrame 정렬(sorted_value 활용)
  import numpy as np
  import pandas as pd
  df = pd.DataFrame({'col1':[2,1,9,8,7,4],'col2':['A','A','B',np.nan,'D','C'],'col3':[0,1,9,4,2,3],})

  sorted_df1 = df.sort_values('col1', ascending=True) # col1 기준으로 오름차순 정렬
  sorted_df2 = df.sort_values('col2', ascending=False) # col2 기준으로 내림차순 정렬
  sorted_df3 = df.sort_values(['col2', 'col1'], ascending=[True, False]) # co2 기준으로 오름차순, col1 기준으로 내림차순 정렬
  ~~~


* __DataFrame 심화__
  - 마스킹 연산, 쿼리 
    + df[('A' < 0.5) & ('B' > 0.3)]
    + df.query('A < 0.5 and B > 0.3']
    
  - 조건으로 검색하기(문자열)
    + df["Animal"] = str.contains["Cat"]
    + df.Animal.str.match("Cat")
    
  - 함수로 데이터 처리하기
    + df["Square"] = df["Num"].apply(square)
    + df["Square"] = df.Num.apply(lambda x : x ** 2)
    
    + df["Sex"] = df.Sex.replace({"Male" : 0, "Female" : 1})
    + df.Sex.replace({"Male" : 0, "Female" : 1}, inplace = True)
    
  - 그룹으로 묶기
    + df.groupby('key')
    + df.groupby('key').sum()
    + df.groupby(['key', 'data1']).sum()
    
    + df.groupby('key').aggregate(['min', np.median, max])
    + df.groupby('key').aggregate({'data1' : 'min', 'data2' : np.sum})
    
    + def filter_by_mean(x):
        return x['data2'].mean() > 3
    + df.groupby('key').mean()
    + df.groupby('key').filter(filter_by_mean)
    
    + df.groupby('key').apply(lambda x : x.max() - x.min())
    
    + get_group : groupby로 묶인 데이터에서 key값으로 데이터를 가져옴
      df.groupby("시도").get_group("충남")  
      
      

  ~~~python
  # 데이터프레임 조건으로 검색하기
  import numpy as np
  import pandas as pd
  df = pd.DataFrame(np.random.rand(5, 2), columns=['A','B']) # A와 B를 컬럼으로 하는 (5,2) 크기의 랜덤 배열 생성 

  df1 = df[(df["A"] < 0.5) & (df["B"] > 0.3)] # A컬럼 값이 0.5보다 작고, B컬럼 값이 0.3보다 큰 값 추출
  df2 = df.query('A < 0.5 and B > 0.3') # query() 함수 사용, df1과 동일
  ~~~

  ~~~python
  # 함수로 데이터 처리하기(apply() 함수 사용)
  import numpy as np
  import pandas as pd
  df = pd.DataFrame(np.arange(5), columns=["Num"])

  def square(x): # 값을 받으면 제곱해서 반환하는 함수
    return x ** 2

  df["Square"] = df["Num"].apply(square) # 데이터프레임에 Square컬럼 생성, 해당 컬럼에 함수(square) apply로 적용
  df["Square"] = df["Num"].apply(lambda x : x ** 2) # lambda 표현식 적용, 위와 동일
  ~~~
  
  
  ~~~python
  # 그룹으로 묶기(groupby() 함수 사용)
  import numpy as np
  import pandas as pd
  df = pd.DataFrame({'key':['A','B','C','A','B','C'], 'data1':[1,2,3,1,2,3], 'data2':[4,4,6,0,6,1],})
  
  print(df.groupby('key')) # key값을 기준으로 묶음
  print(df.groupby('key').sum()) # key값을 기준으로 묶어 합계 출력 
  print(df.groupby(['key','data1]).sum()) # key와 data1을 기준으로 묶어 합계 출력
  ~~~
  
  ~~~python
  # 그룹으로 묶기(aggregate() 함수 사용)
  import numpy as np
  import pandas as pd
  df = pd.DataFrame({'key':['A','B','C','A','B','C'], 'data1':[0,1,2,3,4,5], 'data2':[4,4,6,0,6,1],})

  print(df.groupby('key').aggregate([min, np.median, max])) # key 컬럼으로 묶고, data1과 data2 각각의 최솟값, 중앙값, 최댓값 출력
  print(df.groupby('key').aggregate({'data1':min, 'data2':sum}) # key 컬럼으로 묶고, data1의 최솟값, data2의 합계를 출력
  
  print(df.groupby('key').aggregate(['min', np.median, 'max'])
  # aggregate 메소드에 함수를 매개변수로 넣을 때, min/max/mean/count 등 특정 함수들은 문자열 형태로 넘겨줄 수 있음
  ~~~
  
  ~~~python
  # 그룹으로 묶기(filer() , apply() 함수 사용)
  import numpy as np
  import pandas as pd
  df = pd.DataFrame({'key':['A','B','C','A','B','C'], 'data1':[0,1,2,3,4,5], 'data2':[4,4,6,0,6,1],})
  
  def filter_by_mean(x): # x의 data2 값 평균이 3이 넘는 인덱스만 반환하는 함수
    return x['data2'].mean() > 3
    
  print(df.groupby('key').filter(filter_by_mean)) # key별 data2의 평균이 3이 넘는 인덱스 출력
  print(df.groupby('key').apply(lambda x : x.max() - x.min())) # key를 기준으로 묶은 그룹별 data1과 data2 변수의 최댓값 - 최솟값 출력
  ~~~  
  
  
* __Multi Index__
  - Multi Index : 인덱스를 계층적으로 만들 수 있다.  
  
  

  ~~~python
  # Multi Index 실습
  import numpy as np
  import pandas as pd
  df1 = pd.DataFrame(np.random.randn(4,2), index=[['A','A','B','B'], [1,2,1,2]], columns=['data1','data2'])
  df2 = pd.DataFrame(np.random.randn(4,4), columns=[["A","A","B","B"],["1","2","1","2"]]

  print(df1.loc['A',1]) # 명시적 인덱싱 사용, df1의 인덱스 출력
  print(df2["A"]["1"]) # df2의 [A][1] 컬럼 출력
  ~~~


* __pivot_table__
  - index : 행 인덱스로 들어갈 key
  - column : 열 인덱스로 라벨링될 값
  - value : 분석할 데이터
  - df.pivot_table(index='sex', columns='class', values='survived', aggfunc=np.mean)  



~~~python
# 피리부는 사나이 > 남자, 여자 어린이의 평균연령을 표로 출력
import pandas as pd
import numpy as np
df = pd.read_csv("./data/the_pied_piper_of_hamelin.csv")

children = df[df["구분"] == "Child"] # df의 '구분' 컬럼 값이 Child(어린이)인 것만 추출하여 children에 저장 
children_age = children.groupby('일차').mean() # children을 '일차' 컬럼별로 묶고, 각 평균값을 children_age에 저장

df2 = children.pivot_table(index="일차", columns="성별", values="나이", aggfunc=np.mean) 
# children 데이터를 "일차"를 인덱스로, "성별"을 컬럼으로 받고, 평균 연령값을 넣어 df2에 저장
~~~

---

NumPy에 이어 Pandas에 대해 배워보았다.  
기존 업무 중에 엑셀 활용하여 처리했던 것들을 코딩으로 풀 수 있다는 점이 흥미로웠다.

---

* 출처 : www.elice.io

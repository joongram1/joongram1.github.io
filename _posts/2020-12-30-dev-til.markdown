---
layout: post
title: TIL 2020-12-30 
subtitle: TIL 
categories: dev
tags: til 앨리스코딩 파이썬 데이터분석
comments: true
---


> 2020-12-30 TIL(Today I learned)  

---
##### `앨리스코딩`의 `"파이썬 실적 데이터 분석"` 강의를 듣고 작성한 노트 입니다.
---

* __파일 다루기__
  - file = open('data.txt')  
    content = file.read()  
    file.close()  
    
  - with open('data.txt') as file:  
    contents = file.read()  # 기본적으로 읽기 모드로 파일을 염 
    
  - contents = []  
    with open('data.txt') as file:  
      for line in file:  
        contents.append(line)  
        
  - with open('data.txt', 'w') as file:  
    file.write('Hello')  # 쓰기 모드로 파일을 염 </br>
    
  ~~~python
  # 파일 열어 "(줄번호) (내용)" 형식으로 출력하기
  def print_lines(filename):
    with open(filename) as file:
      line_number = 1
      for line in file:
        print(str(line_number) + ' ' + line)
        line_number += 1
  ~~~
    
* __데이터 구조 다루기__
  - 튜플( ) vs 리스트[ ]
    + 공통점 : 순서가 있는 원소들의 집합
    + 차이점 : 각 원소의 값을 수정할 수 없음(튜플), 원소의 개수를 바꿀 수 없음(튜플)  
  - split = line.strip().split(',') 
    + strip() : 문자열에 사용하는 함수로 앞 뒤의 공백문자를 삭제함
    
  - 데이터 형태 변환하기 </br>

  ~~~python
  def import_as_tuple(filename):
    tuples = []
    with open(filename) as file:
      for line in file:
        split = line.strip().split(',') # strip() : 문자열(str)에 사용하며, 앞/뒤의 모든 공백문자(\n 등)을 제거
        word, freq = split[0], split[1]
        new_tuple = (word, freq)
        tuples.append(new_tuple)

  return tuples  
  ~~~
 
  - 리스트로 리스트 만들기(List comprehension)
    + first_letters = [word[0] for word in words]
    + new_numbers = [n + 1 for n in numbers] </br>
  ~~~python
  # 한 줄 명령어로 데이터 다루기
  words = ['apple','banana','alpha']
  def filter_by_prefix(words, prefix):
    new_words = [word for word in words if word.startswith(prefix)]
    
    return new_words
  ~~~  
    
  - 특정 원소 걸러내기
    + even = [n for n in numbers if n % 2 == 0]
    + odd = [n + 1 for n in numbers if n % 2 == 0]  
    
  - 데이터 정렬하기
    + sory_by_abs = sorted(numbers, key=abs) # 절대값 순으로 정렬 </br>
  ~~~python
  new_nums = sorted([-4, 1, -3], key=abs) # abs() : 절댓값을 리턴하는 파이썬 내장함수
  ~~~
    
    + sort_by_alphabet = sorted(fruits) # 기본 순서(알파벳순)으로 정렬
    + def reverse(word):  
      return str(reversed(word))  
      sort_by_last = sorted(fruits, key=reverse)  
      
    + sorted(corpus, key=itemgetter(1), reverse=True)[:number]  
      corpus 데이터(튜플로 이루어짐) 중 각 튜플 데이터의 1번째 인덱스값(key=itemgetter(1)을 기준으로  
      내림차순 정렬(reverse=True), 이후 number값 개수만큼 가장 높은 순으로 데이터 추림  </br>
    
  ~~~python
  # 데이터 정렬하기(sorted() 사용)
  pairs = [('time', 8), ('the', 15), ('turbo', 1),]
  
  def get_freq(pair): # (단어, 빈도수) 튜플에서 빈도수를 반환
    return pair[1]
  
  def sort_by_frequency(pairs): # (단어, 빈도수) 튜플이 모인 리스트를 받아, 빈도수가 낮은 순서대로 정렬하여 반환
    new_pairs = sorted(pairs, key=get_freq) # key에 지정한 함수를 따라 정렬, 내림차순 정렬(기본값)
    
    return new_pairs
  ~~~

  ~~~python
  # 최근 평균 기온 그래프 그리기
  import matplotlib.pyplot as plt
  years = [2013, 2014, 2015, 2016, 2017]
  temperatures = [5, 10, 15, 20, 17]

  def draw_graph():
    pos = range(len(years)) # 막대 그래프의 막대 위치를 결정하는 pos를 선언 : [0,1,2,3,4]  

    plt.bar(pos, temperatures, align='center') # 높이가 온도인 막대 그래프 그리기, 각 막대는 가운데 정렬
    plt.xticks(pos, years) # 각 막대에 해당되는 연도를 표기(x축)
    plt.savefig('graph.png') # graph.png 이름으로 그래프 파일 저장  
  ~~~
 
 
  * __Counter()__
    - corpus = Counter(words) : words 문자열에 포함된 각 알파벳의 글자수를 세어줌
    - Collections 모듈의 Counter 클래스 </br>

  ~~~python
  # 영어 단어 모음 분석하기 실습
  # 프로젝트에 필요한 패키지 import
  from operator import itemgetter
  from collections import Counter
  from string import punctuation
  import matplotlib.pyplot as plt
  import matplotlib.font_manager as fm

  # (단어, 빈도수) 튜플로 구성된 리스트 반환
  def import_corpus(filename):
    corpus = []
    with open(filename) as file:
      for line in file:
        word, freq = line.strip().split(',')
        tuple = (word, int(freq))
        corpus.append(tuple)

    return corpus

  # 텍스트 파일 여럿을 한번에 불러오고, (단어, 빈도수) 튜플로 구성된 리스트 반환
  def create_corpus(filenames):
    words = [] # 여럿 텍스트 파일의 모든 단어를 저장할 리스트 생성

    # 문장부호를 포함한 모든 특수기호 제거 후, words에 분리한 단어들을 순회하며 저장
    for filename in filenames:
      with open(filename) as file:
        content = file.read().strip()
        for symbol in punctuation: 
          content = content.replace(symbol, "")
          words += content.split()

    # words 리스트의 데이터를 corpus 형태(튜플이 들어 있는 리스트)로 변환
    corpus = Counter(words) # Counter 클래스 사용, words 문자열이 포함된 단어 개수를 세어 줌
    return list(corpus.items()) # items() 메소드 사용, corpus에 담긴 key, value값 쌍을 모두 한번에 가져옴

  # (단어, 빈도수) 튜플을 담고 있는 리스트 중 특정 문자열로 시작하는 단어들만 추린 리스트 반환
  def filter_by_prefix(corpus, prefix):
    return [(word, freq) for word, freq in corpus if word.startswith(prefix)]

  # (단어, 빈도수) 튜플을 담고 있는 리스트 중 가장 빈도수가 높은 number개의 데이터 반환
  def most_frequent_words(corpus, number):
    # operator 모듈의 itemgetter() 함수 사용, itemgetter(1)은 corpus 내 각 튜플의 인덱스 1의 값을 기준으로 행동
    # 인덱스 1의 값을 reverse=True(내림차순)한 것을 분류한 리스트 추린 후(sorted), number개 만큼 데이터 반환
    return sorted(corpus, key=itemgetter(1), reverse=True)[:number] 
  ~~~

    
---

오늘은 데이터를 좀 더 만지는 방법에 대해 배웠다.  
파이썬에 있는 많은 모듈의 사용법 등을 앞으로 많이 체득해야 겠다.  

---
  
    
    
    

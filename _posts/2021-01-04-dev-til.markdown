---
layout: post
title: TIL 2021-01-04
subtitle: TIL 
categories: dev
tags: til 앨리스코딩 파이썬 데이터분석 map filter itemgetter sorted jsonify
comments: true
---


> 2021-01-04 TIL(Today I learned)
---

##### `앨리스코딩`의 `"파이썬 실전 데이터 분석"` 강의를 듣고 작성한 노트 입니다.
---

* __map()__
  - def get_eng_title(row):  
    split = row.split(',')  
    return split[1]  
    
  - eng_titles = map(get_eng_title, movies)  
    eng_titles = map(lambda row: row.split(',')[1], movies)
    
  - [get_eng_title(row) for row in movies]  
    [row.split(',')[1] for row in movies]
    
  - map과 list는 동일한가요?
    + 다르다. 엄밀히는 list가 아닌 map이라는 타입을 가짐
    + map이라는 타입으로 임시 저장을 해두고, 필요할 때(호출할 때) 연산을 시작함</br>
  
  
  ~~~python
  # 리스트에 함수 적용하기 - map() 함수 사용
  # map()은 데이터 구조의 각 원소들에 동일한 함수를 적용하여 새로운 데이터를 만들어줌
  import csv
  
  def get_title(filename):
    with open(filename) as books:
      reader = csv.reader(books, delimiter='.')
      
      get_title = lambda row: row[0]
      # map() 함수 사용, reader 데이터에 get_title 함수를 일괄 적용하여 titles 데이터 새로 생성
      titles = map(get_title, reader) 
      
      # map() 함수 사용한 결과 데이터는 데이터 타입이 map타입으로, list로 변환 후 출력함
      return list(titles)
  ~~~
  
  
* __filter()__
  - r_words = [word for word in words if word.startswith('r')]  
  - r_words = filter(lambda word: word.startswith('r'), words)
    + filer 역시 filter 타입으로 임시 저장을 함, map과 함께 list(r_words) 이런 식으로 호출해야 정상 연산됨</br>
  
  
  ~~~python
  # 리스트에 함수 적용하기 - filer() 함수 사용
  # filer()는 주어진 데이터 구조에 특정 조건을 만족하는 원소만 골라내는 함수
  import csv
  
  def get_title_of_long_books(filename):
    with open(filename) as books:
      reader = csv.reader(books, delimiter=',')
      
      # 페이지수가 250이 넘는 데이터를 골라내는 함수 정의(is_long)
      # 책 제목만 골라내는 함수 정의(get_title)
      is_long = lambda row: int(row[3]) >= 250
      get_title = lambda row: row[0]
      
      # filter() 함수 사용, reader 데이터에 is_long 함수를 통해 페이지수 250이 넘는 데이터만 골라내어 long_books 저장
      long_books = filter(is_long, reader)
      # map() 함수 사용, long_books 데이터에 get_title 함수를 일괄 적용하여 해당 책 제목들만 골라냄
      long_book_titles = map(get_title, long_books)
      
      return list(long_book_titles)
  ~~~
  
  
  ~~~python
  # 인기 있는 TED 강연 분석하기 실습
  import csv
  import json
  import matplotlib.pyplot as plt
  import matplotlib.font_manager as fm
  from operator import itemgetter

  # 주어진 데이터를 json형식으로 바꾸는 jsonify 함수 정의
  def jsonity(data):
    return json.loads(data.replace("'", '"'))

  # 주어진 CSV 파일을 열고, 리스트 형태로 변환 (각 원소는 딕셔너리 형태로 이루어짐)
  def preprocess_talks(csv_file):
    talks = []

    with open(csv_file) as file:
      reader = csv.reader(file, delimiter=',')

      # reader 각 row를 순회하며 talk 딕셔너리를 반복 생성, 그 후 talks 리스트에 저장
      for row in reader:
        try:
          talk = {'title':row[14], 'speaker':row[6], 'views':int(row[16]), 'comments':int([row[0]),
                  'duration':int(row[2]), 'languages':int(row[5]), 'tags':jsonify(row[13]), 'ratings':jsonify(row[10])}
        # json파일에 존재하는 작은/큰 따옴표 형식을 하나로 통일하기 위해 tags, ratings는 jsonify 함수 적용
        execpt:
          pass
        talks.append(talk)

    return talks
  ~~~
  
  ```python
  # 가장 인기 있는 태그 상위 n개 반환
  def get_popular_tags(talks, n):
    # 태그 별 인기도를 저장한 딕셔너리 생성
    tag_to_views = {}

    # 태그 별 인기도를 구해 tag_to_views에 저장
    # {'태그1':인기도1, '태그2':인기도2....}
    for talk in talks:
      tags, views = talk['tags'], talk['views]

      # tags에 있는 각 tag를 순회
      for tag in tags:
        # tag가 tag_to_views에 포함되면, 해당 tag의 조회수를 계속 더해간다.
        if tag in tag_to_views:
          tag_to_views[tag] += views
        # tag가 tag_to_views에 없으면, 해당 tag와 조회수를 새로 저장한다.
        else:
          tag_to_views[tag] = views

      # tag_to_views(딕셔너리)를 (태그, 인기도) 튜플이 포함된 리스트 형식으로 변환
      # [(태그1, 인기도1), (태그2, 인기도2), ...]
      tag_view_pairs = list(tag_to_views.items())

      # 인기도가 높은 순서대로 정렬하여 앞의 n개 취함
      top_tag_and_views = sorted(tag_view_pairs, key=itemgetter(1), reverse=True)[:n]
      # n개 취한 리스트에서 tag만 반환
      top_tags = map(itemgetter(0), top_tag_and_views)

    return list(top_tags)

  # 강연길이에 따른 강의 끝까지 들은 비율(완수도) 반환
  def completion_rate_by_duration(talks):
    # List Comprehension 사용, durations와 completion_rates에 데이터 저장
    durations = [talk['duration'] for talk in talks]
    completion_rates = [talk['comments'] / talk['views'] for talk in talks]

    return completion_rates, durations

  # 지원되는 언어수에 따른 조회수 반환, 해당 관계에 대한 산점도 그리기
  def views_by_languages(talks):
    # List Comprehension 사용, languages와 views에 데이터 저장
    languages = [talk['languages'] for talk in talks]
    views = [talk['views'] for talk in talks]
    scatter_plot(languages, views, '언어수', '조회수')

    return views, languages

  # 강의에 대한 다양한 평가를 막대그래프로 표현, 각각의 평가 키워드와 횟수 세어 반환
  def show_ratings(talk):
    ratings = talk['ratings']

    keywords = [rating['name'] for rating in ratings]
    counts = [rating'count'] for rating in ratings]
    bar_plot(keywords, counts, '키워드', 'rating수')

    return keywords, counts

  # scatter_plot 함수 정의(산점도)
  def scatter_plot(x, y, x_label, y_label):
      font = fm.FontProperties(fname='./NanumBarunGothic.ttf')

      plt.scatter(x, y)
      plt.xlabel(x_label, fontproperties=font)
      plt.ylabel(y_label, fontproperties=font)

      plt.xlim((min(x), max(x)))
      plt.ylim((min(y), max(y)))
      plt.tight_layout()

      plot_filename = 'plot.png'
      plt.savefig(plot_filename)

  # bar_plot 함수 정의(막대그래프)
  def bar_plot(x_ticks, y, x_label, y_label):
      assert(len(x_ticks) == len(y))

      font = fm.FontProperties(fname='./NanumBarunGothic.ttf')

      pos = range(len(y))
      plt.bar(pos, y, align='center')
      plt.xticks(pos, x_ticks, rotation='vertical', fontproperties=font)

      plt.xlabel(x_label, fontproperties=font)
      plt.ylabel(y_label, fontproperties=font)
      plt.tight_layout()

      plot_filename = 'plot.png'
      plt.savefig(plot_filename)

  ```


---

파이썬 실전 데이터 분석 강의를 모두 수강했다.  
코드 실습까지 1번 더 했으나 여전히 손에 잘 안 익는다.  
백문이 불여일타 라고 했으니 시간 날 때마다 직접 계속 타이핑해보면서 연습해야 겠다.  

---
  

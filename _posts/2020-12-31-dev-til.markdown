---
layout: post
title: TIL 2020-12-31 
subtitle: TIL 
categories: dev
tags: til 앨리스코딩 파이썬 데이터분석 딕셔너리 집합 그래프 items JSON loads dumps
comments: true
---


> 2020-12-31 TIL(Today I learned)
---

#### `앨리스코딩`의 `"파이썬 실전 데이터 분석"` 강의를 듣고 작성한 노트 입니다.
---

* __딕셔너리__
  - 원하는 데이터를 빠르게 찾아낼 수 있음
  - accounts = [("kdhong.elice", "Kildong Hong"),...]
    + for id_, name in accounts:  
        if id_ == "kdhong.elice":  
          print(name)  
          
  - 리스트는 모든 데이터를 확인하여 값을 산출하기에 딕셔너리에 비해 수십 배 성능 차이가 남  
  - user, title = line.strip().split(":")  
    user_to_titles[user(key값)] = title(value값)</br>
  ~~~python
  # 데이터 빠르게 탐색하기 - 딕셔너리 활용
  def make_dictionary(filename):
    user_to_titles = {}
    with open(filename) as file:
      for line in file:
        user, title = line.strip().split(':')
        user_to_titles[user] = title
        
    return user_to_titles
  ~~~
    
  
  - 딕셔너리 키 값은 일부 제한 있음 (Value값은 없음)
    + 변할 수 없는 값만 키 값으로 받음. (키 값 수정 불가능)
    
  - 딕셔너리 키 확인하기
    + print("kdhong" in accounts) # True 
    + print("elice" in acoounts) # False  
    
  - 딕셔너리 순회하기
    + for username, name in accounts.itmes():  
      print(username + " - " + name)
    + items() : 해당 딕셔너리의 key, value값이 tuple로 구성된 리스트로 리턴</br>
    
  ~~~python
  # 데이터 순회하기 - items() 사용
  user_to_titles = {1: [123,456,789], 2: [312,19,443]}
  def get_user_to_num_titles(user_to_titles):
    user_to_num_titles = {}
    
    # 딕셔너리의 모든 키와 값을 (키, 값) 튜플 형태로 리스트에 담기
    for user, title in user_to_titles.items():
      num_titles = len(title)
      user_to_num_titles[user] = num_titles
      
    return user_to_num_titles
  ~~~
    
  - JSON(JavaScript Object Notation)
    + { key : value } 형태  
    + 웹 환경에서 데이터를 주고 받는 가장 표준적인 방식, 키를 이용하여 원하는 데이터 빠르게 추출 가능
    + 데이터가 쉽게 오염되지 않음, 다른 포맷에 비해 용량이 조금 큰 편
    
    + JSON -> 딕셔너리 : loads()
    + 딕셔너리 -> JSON : dumps()</br>
  
  ~~~python
  # JSON 데이터 읽고 생성하기
  # json 패키지 임포트
  import json
  
  # JSON 파일을 읽고 문자열을 딕셔너리로 변환
  def create_dict(filename):
    with open(filename) as file:
      json_string = file.read()
      
      # json_string을 new_dict에 딕셔너리 형태로 변환(loads 사용)
      new_dict = json.loads(json_string) 
      
    return new_dict

  # JSON 파일을 읽고 딕셔너리를 JSON 형태의 문자열로 변환
  def create_json(dictionary, filename):
    # 파일을 쓰기모드('w')로 열기
    with open(filename, 'w') as file:
    
    # 딕셔너리를 JSON 형태로 변환(dumps 사용)
    json_string = json.dumps(dictionary)
    file.write(json_string)
    
    return json
  ~~~
    
    
* __집합(set)__
  - 특징 : 중복 없음, 순서 없음
  - set1 = {1 , 2 , 3} # 셋 다 같은 값 (리스트는 순서가 있어 다르게 인식) 
    set2 = set([1, 2, 3])  
    set3 = {3, 2, 3, 1}
  - num_set.add(9)  
    num_set.update([3, 15, 4])  
    num_set.remove(7) # 반드시 해당 원소가 있어야 제거 한다(아닐 경우 에러)  
    num_set.discard(13) # 해당 원소가 없으면 그냥 넘어감  
  - 집합 다루기
    + print(6 in num_set) # False
    + print(len(num_set)) # 4 
    
  - 집합 연산
    + 교집합, 합집합, 차집합
    + XOR(Exclusive or) : 교집합을 제외한 나머지 
    + union = set1 | set2 # 합집합  
      intersection = set1 & set2 # 교집합  
      diff = set1 - set2 # 차집합  
      xor = set1 ^ set2 # XOR</br>  

  ~~~python
  # 데이터 집합 나타내기
  my_set = {3, 5}
  
  # 정수 7을 my_set에 추가
  my_set.add(7) 
  
  # new_numbers 리스트의 원소를 my_set에 추가
  new_numbers = [1,2,3,4,5]
  
  # my_set에서 짝수 모두 제거(num을 2로 나눈 나머지가 0이 아니면 my_set에 추가)
  my_set = {num for num in my_set if num % 2 != 0} 
  ~~~


* __그래프 설정하기__</br>
  ~~~python
  # matplotlib으로 차트 설정하기
  import matplotlib.pyplot as plt
  import matplotlib.font_manager as fm
  
  # 날짜 별 온도 데이터 세팅
  dates = ["1월 {}일".format(day) for day in range(1, 32)]
  temperatures = list(range(1, 32))
  
  # 막대 그래프의 막대 위치 결정하는 pos 선언
  pos = range(len(dates)) # 1 ~ 31일까지, 총 31개 막대 생성
  
  # 나눔바른고딕 폰트 설정
  font = fm.FontProperties(fname='./NanumBarunGothic.ttf')
  
  # 막대 높이가 빈도값이 되게 설정
  plt.bar(pos, temperatures, align='center')
  
  # 각 막대에 해당되는 단어 입력
  # x축 각 막대별로 날짜가 입력되며, 90도 수직회전(vertical) 및 폰트 적용
  plt.xticks(pos, dates, rotation='vertical', fontproperties=font)
  
  # 그래프의 제목 설정
  plt.title('1월 중 기온 변화', fontproperties=font)
  
  # y축에 설명 추가
  plt.ylabel('온도', fontproperties=font)
  
  # 단어가 잘리지 않게 여백 조정
  plt.tight_layout
  ~~~

---

딕셔너리와 JSON 데이터 간 상호 호환되는 부분이 인상 깊었다.  
학창시절 배운 집합 개념도 이렇게 파이썬에서 만나니 참 반가웠다.  

---
